<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Snake Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        #game-container {
            border: 2px solid #000;
            width: 400px;
            height: 400px;
            position: relative;
        }
        .snake {
            width: 20px;
            height: 20px;
            background-color: #333;
            position: absolute;
        }
        .food {
            width: 20px;
            height: 20px;
            background-color: red;
            position: absolute;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <!-- Snake and Food elements will be added here dynamically -->
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gameContainer = document.getElementById('game-container');
            const gridSize = 20;
            let snake = [{ x: 200, y: 200 }];
            let food = { x: 0, y: 0 };
            let dx = 0;
            let dy = 0;
            let score = 0;

            function updateSnake() {
                snake.pop();
                snake.unshift({ x: snake[0].x + dx, y: snake[0].y + dy });
            }

            function generateFood() {
                food.x = Math.floor(Math.random() * (gameContainer.offsetWidth / gridSize)) * gridSize;
                food.y = Math.floor(Math.random() * (gameContainer.offsetHeight / gridSize)) * gridSize;
            }

            function draw() {
                gameContainer.innerHTML = '';
                snake.forEach(segment => {
                    const snakeElement = document.createElement('div');
                    snakeElement.classList.add('snake');
                    snakeElement.style.left = `${segment.x}px`;
                    snakeElement.style.top = `${segment.y}px`;
                    gameContainer.appendChild(snakeElement);
                });

                const foodElement = document.createElement('div');
                foodElement.classList.add('food');
                foodElement.style.left = `${food.x}px`;
                foodElement.style.top = `${food.y}px`;
                gameContainer.appendChild(foodElement);
            }

            function checkCollision() {
                if (snake[0].x === food.x && snake[0].y === food.y) {
                    snake.push({ ...snake[snake.length - 1] });
                    generateFood();
                    score++;
                }
            }

            function checkGameOver() {
                if (
                    snake[0].x < 0 ||
                    snake[0].x >= gameContainer.offsetWidth ||
                    snake[0].y < 0 ||
                    snake[0].y >= gameContainer.offsetHeight ||
                    snake.slice(1).some(segment => segment.x === snake[0].x && segment.y === snake[0].y)
                ) {
                    clearInterval(gameLoop);
                    alert(`Game Over! Your score is: ${score}`);
                }
            }

            function gameLoop() {
                updateSnake();
                checkCollision();
                checkGameOver();
                draw();
            }

            generateFood();
            draw();

            document.addEventListener('keydown', e => {
                switch (e.key) {
                    case 'ArrowUp':
                        if (dy !== gridSize) {
                            dx = 0;
                            dy = -gridSize;
                        }
                        break;
                    case 'ArrowDown':
                        if (dy !== -gridSize) {
                            dx = 0;
                            dy = gridSize;
                        }
                        break;
                    case 'ArrowLeft':
                        if (dx !== gridSize) {
                            dx = -gridSize;
                            dy = 0;
                        }
                        break;
                    case 'ArrowRight':
                        if (dx !== -gridSize) {
                            dx = gridSize;
                            dy = 0;
                        }
                        break;
                }
            });

            const gameInterval = 100;
            const gameLoop = setInterval(() => {
                gameLoop();
            }, gameInterval);
        });
    </script>
</body>
</html>
//这是一个简单的前端贪吃蛇游戏，希望对你有帮助。
